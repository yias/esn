//#pragma once
#include <iostream>
#include <string.h>
#include <fstream>
#include <math.h>

//using namespace std;

class ESN
{
int nInternalUnits;
int nInputs;
int nOutputs;
float **internalWeightsUnitSR;
int nTotalUnits;

float **inputWeights;
float **outputWeights;
float **feedbackWeights;
float *inputScaling;
float *inputShift;
float *teacherScaling;
float *teacherShift;

float *feedbackScaling;
float leakage;
float *timeConstants;
float **internalWeights;

public:
	ESN(void);
	ESN(string file);
	int setinterntalWUSR(ifstream& f, int k, int l);

	int setinputWeights(ifstream& f, int k, int l); //
	int setoutputWeights(ifstream& f, int k, int l); //
	int setfeedbackWeights(ifstream& f, int k, int l); //
	int setinputScaling(ifstream& f, int k); //
	int setinputShift(ifstream& f, int k); //
	int setteacherScaling(ifstream& f, int k); //
	int setteacherShift(ifstream& f, int k); //

	int setfeedbackScaling(ifstream& f, int k); //
	int settimeConstants(ifstream& f, int k);
	int setinternalWeights(ifstream& f, int k, int l);
	int printall();

	int test_esn(float **EMGsignal, int nforgetpoints, int nDatapoints);
	float** compute_statematrix(float **EMGsignal, int nforgetpoints, int nDatapoints);
	float *plain_esn(float *tState);
	int s_classify(float **outputSeq, int npoints);

	~ESN(void);

};


ESN::ESN(void)
{
}


ESN::~ESN(void)
{
	for (int i = 0; i < nInternalUnits; i++){
		delete internalWeightsUnitSR[i];
	}
	delete internalWeightsUnitSR;
	for (int i = 0; i < nInternalUnits; i++){
		delete inputWeights[i];
	}
	delete inputWeights;
	for (int i = 0; i < nOutputs; i++){
		delete outputWeights[i];
	}
	delete outputWeights;
	for (int i = 0; i < nInternalUnits; i++){
		delete feedbackWeights[i];
	}
	delete feedbackWeights;

	delete inputScaling;
	delete inputShift;
	delete teacherScaling;
	delete teacherShift;

	delete feedbackScaling;
	delete timeConstants;

	for (int i = 0; i < nInternalUnits; i++){
		delete internalWeights[i];
	}
	delete internalWeights;

	cout << "the ESN deleted";
	cin.get();
}

ESN::ESN(int esn_nb){
	//char line[100],line2[100];
	//int tn;
	
	//std::cout << file <<"\n";
    std::string file="ESN_network/EMG";
    std::ostringstream convert;
    convert<<file<<esn_nb<<".txt";

    std::ifstream myfile(convert.str());

	if(myfile.is_open()){

		//myfile>>line;
		//cout<<line<<" ";

		myfile>>nInternalUnits;
		myfile>>nInputs;
		myfile>>nOutputs;
		
		setinterntalWUSR(myfile, nInternalUnits, nInternalUnits);
		myfile>>nTotalUnits;

		setinputWeights(myfile, nInternalUnits, nInputs);
		setoutputWeights(myfile, nOutputs, (nInternalUnits+nInputs));
		setfeedbackWeights(myfile, nInternalUnits, nOutputs);
		setinputScaling(myfile, nInputs);
		setinputShift(myfile, nInputs);
		setteacherScaling(myfile, nOutputs);
		setteacherShift(myfile, nOutputs);

		setfeedbackScaling(myfile, nOutputs);
		settimeConstants(myfile,nInternalUnits);
		myfile>>leakage;
		setinternalWeights(myfile,nInternalUnits, nInternalUnits);


		//myfile>>line2;
		//myfile>>nInputs;
		
        std::cout<<nInternalUnits<<"\n";
		//cout<<line2<<"\n";
        std::cout<<nInputs<<"\n";
		myfile.close();
	}
    else std::cout<<"Unable to open file"<<"\n";

}

int ESN::setinterntalWUSR(std::ifstream& f, int k, int l){
	
	float **tmp= new float*[k];

	for(int i=0;i<k;i++){
		tmp[i]= new float[l];
		for(int j=0;j<l;j++){
			//float temp;
			f>>tmp[i][j];
			//cout<<tmp[i][j]<<" ";
			//cout<<tmp[i][j]<<endl;
			//inputWeights[i][j]=temp;
		}
	}

    std::cout<<"\n";
	internalWeightsUnitSR=tmp;
    std::cout<<tmp[50][50]<<" "<<internalWeightsUnitSR[50][50]<<"\n";
    std::cout<<tmp[99][99]<<" "<<internalWeightsUnitSR[99][99]<<"\n";
	

	

    std::cout << internalWeightsUnitSR[0][1]<<" ";
    std::cout << internalWeightsUnitSR[1][0] << " \n";

	float result=internalWeightsUnitSR[0][1]+internalWeightsUnitSR[1][0];
    std::cout<<result<<"\n";
	return 0;
}


int ESN::setinputWeights(std::ifstream& f, int k, int l){
	float **tmp= new float*[k];
	for(int i=0;i<k;i++){
		tmp[i]= new float[l];
		for(int j=0;j<l;j++){
			f>>tmp[i][j];
		}
	}
	inputWeights=tmp;
	/*for(int i=0;i<k;i++){
		delete tmp[i];
	}
	delete tmp;*/
	return 0;
}


int ESN::setoutputWeights(std::ifstream& f, int k, int l){
	float **tmp= new float*[k];
	for(int i=0;i<k;i++){
		tmp[i]= new float[l];
		for(int j=0;j<l;j++){
			f>>tmp[i][j];
		}
	}
	outputWeights=tmp;
	/*for(int i=0;i<k;i++){
		delete tmp[i];
	}
	delete tmp;*/
	return 0;
}

int ESN::setfeedbackWeights(std::ifstream& f, int k, int l){
	float **tmp= new float*[k];
	for(int i=0;i<k;i++){
		tmp[i]= new float[l];
		for(int j=0;j<l;j++){
			f>>tmp[i][j];
		}
	}
	feedbackWeights=tmp;
	/*for(int i=0;i<k;i++){
		delete tmp[i];
	}
	delete tmp;*/
	return 0;
}

int ESN::setinputScaling(std::ifstream& f, int k){
	float *tmp= new float[k];
	for(int i=0;i<k;i++) f>>tmp[i];
	inputScaling=tmp;
	//delete tmp;
	return 0;
}

int ESN::setinputShift(std::ifstream& f, int k){
	float *tmp= new float[k];
	for(int i=0;i<k;i++) f>>tmp[i];
	inputShift=tmp;
	//delete tmp;
	return 0;
}

int ESN::setteacherScaling(std::ifstream& f, int k){
	float *tmp= new float[k];
	for(int i=0;i<k;i++) f>>tmp[i];
	teacherScaling=tmp;
	//delete tmp;
	return 0;
}

int ESN::setteacherShift(std::ifstream& f, int k){
	float *tmp= new float[k];
	for(int i=0;i<k;i++) f>>tmp[i];
	teacherShift=tmp;
	//delete tmp;
	return 0;
}

int ESN::setfeedbackScaling(std::ifstream& f, int k){
	float *tmp= new float[k];
	for(int i=0;i<k;i++) f>>tmp[i];
	feedbackScaling=tmp;
	//delete tmp;
	return 0;
}

int ESN::settimeConstants(std::ifstream& f, int k){
	float *tmp= new float[k];
	for(int i=0;i<k;i++) f>>tmp[i];
	timeConstants=tmp;
	//delete tmp;
	return 0;
}

int ESN::setinternalWeights(std::ifstream& f, int k, int l){
	float **tmp= new float*[k];
	for(int i=0;i<k;i++){
		tmp[i]= new float[l];
		for(int j=0;j<l;j++){
			f>>tmp[i][j];
		}
	}
	internalWeights=tmp;
	/*for(int i=0;i<k;i++){
		delete tmp[i];
	}
	delete tmp;*/
	return 0;
}

int ESN::printall(){
    std::cout<<"number of Internal Units: "<<nInternalUnits<<endl;
    std::cout<<"number of Input Units: "<<nInputs<<endl;
    std::cout<<"number of Output Units: "<<nOutputs<<endl;
    //std::cin.get();

    std::cout<<"internal Weights UnitSR"<<endl;
	
	for(int i=0;i<nInternalUnits;i++){
        for(int j=0;j<nInternalUnits;j++) std::cout<<internalWeightsUnitSR[i][j]<<" ";
        std::cout<<endl;
	}

    //std::cin.get();
    std::cout<<"number of Total Units: "<<nTotalUnits<<endl;
    //cin.get();
    std::cout<<"input Weights:"<<endl;
	for(int i=0;i<nInternalUnits;i++){
        for(int j=0;j<nInputs;j++) std::cout<<inputWeights[i][j]<<" ";
        cstd::out<<endl;
	}
    //cin.get();
    std::cout<<"output Weights:"<<endl;
	for(int i=0;i<nOutputs;i++){
        for(int j=0;j<(nInputs+nInternalUnits);j++) std::cout<<outputWeights[i][j]<<" ";
        std::cout<<endl;
	}
    //cin.get();
    std::cout<<"feedback Weights:"<<endl;
	for(int i=0;i<nInternalUnits;i++){
        for(int j=0;j<nOutputs;j++) std::cout<<feedbackWeights[i][j]<<" ";
        std::cout<<endl;
	}
    //cin.get();
    std::cout<<"input Scalling:"<<endl;
    for(int i=0;i<nInputs;i++) std::cout<<inputScaling[i]<<" ";
    std::cout<<endl;
    //cin.get();
    std::cout<<"input Shift:"<<endl;
    for(int i=0;i<nInputs;i++) std::cout<<inputShift[i]<<" ";
    std::cout<<endl;
    //cin.get();
    std::cout<<"teacher Scaling:"<<endl;
    for(int i=0;i<nOutputs;i++) std::cout<<teacherScaling[i]<<" ";
    std::cout<<endl;
    //cin.get();
    std::cout<<"teacher Shift:"<<endl;
    for(int i=0;i<nOutputs;i++) std::cout<<teacherShift[i]<<" ";
    std::cout<<endl;
    //cin.get();
    std::cout<<"feedback Scaling:"<<endl;
    for(int i=0;i<nOutputs;i++) std::cout<<feedbackScaling[i]<<" ";
    std::cout<<endl;
    //std::cin.get();
    std::cout<<"time Constants:"<<endl;
    for(int i=0;i<nInternalUnits;i++) std::cout<<timeConstants[i]<<" ";
    std::cout<<endl;
    //std::cin.get();
    std::cout<<"internal Weights:"<<endl;
	for(int i=0;i<nInternalUnits;i++){
        for(int j=0;j<nInternalUnits;j++) std::cout<<internalWeights[i][j]<<" ";
        std::cout<<endl;
	}
    //std::cin.get();
    std::cout<<"leakage: "<<leakage<<endl;
	

	return 0;
}

int ESN::test_esn(float **EMGsignal, int nforgetpoints, int nDatapoints){
	float **stateCollection=compute_statematrix(EMGsignal,nforgetpoints,nDatapoints);
	//for(int i=0;i<nDatapoints-nforgetpoints;i++){
		
	//}
	float **outputSequence=new float*[nDatapoints-nforgetpoints];
	for(int i=0;i<nDatapoints-nforgetpoints;i++){
		outputSequence[i]=new float[nOutputs];
		
		for(int j=0;j<nOutputs;j++){
			float tmp2=0;
			for(int k=0;k<nInputs+nInternalUnits;k++){
				tmp2=stateCollection[i][k]*outputWeights[j][k]+tmp2;
				
			}
			
			outputSequence[i][j]=tmp2;
		}
		
		//delete tmp;
	}
	/*for(int i=0;i<nDatapoints-nforgetpoints;i++){
		for(int j=0;j<nOutputs;j++){
				cout<<outputSequence[i][j]<<" ";
		}
		cout<<"\n";
	}*/
	float **repmat=new float*[nDatapoints-nforgetpoints];
	for(int i=0;i<(nDatapoints-nforgetpoints);i++){
		repmat[i]=new float[nOutputs];
		for(int j=0;j<nOutputs;j++) repmat[i][j]=teacherShift[j];
		
		
	}
	
	for(int i=0;i<(nDatapoints-nforgetpoints);i++){
		for(int j=0;j<nOutputs;j++){
			outputSequence[i][j]=outputSequence[i][j]-repmat[i][j];
		}
	}
	float **invDiagTeacherScalling=new float*[nOutputs];
	for(int i=0;i<nOutputs;i++){
		invDiagTeacherScalling[i]=new float[nOutputs];
		for(int j=0;j<nOutputs;j++){
			invDiagTeacherScalling[i][j]=0;
			if(i==j){ 
				invDiagTeacherScalling[i][j]=1/teacherScaling[i];
			}
		}
	}

	

	for(int i=0;i<nDatapoints-nforgetpoints;i++){
		for(int j=0;j<nOutputs;j++){
			float tmp2=0;
			for(int k=0;k<nOutputs;k++){
				tmp2=tmp2+outputSequence[i][k]*invDiagTeacherScalling[k][j];
			}
			outputSequence[i][j]=tmp2;
		}
	}

	int classification_result=s_classify(outputSequence,nDatapoints-nforgetpoints);	
	
	//free memory
	for(int i=0;i<(nDatapoints-nforgetpoints);i++){
		delete stateCollection[i];
		delete outputSequence[i];
		delete repmat[i];
	}
	delete stateCollection;
	delete outputSequence;
	delete repmat;

	for(int i=0;i<nOutputs;i++){
		delete invDiagTeacherScalling[i];
	}
	delete invDiagTeacherScalling;

	return classification_result;
}

float** ESN::compute_statematrix(float **EMGsignal, int nforgetpoints, int nDatapoints){

	float *totalstate= new float[nInternalUnits+nInputs+nOutputs];
	for(int i=0;i<nInternalUnits+nInputs+nOutputs;i++) totalstate[i]=0;
	float **stateCollectMat= new float*[nDatapoints-nforgetpoints];
	float *netOut = new float[nOutputs];
	float *in = new float[nInputs];
	float *internalState = new float[nInternalUnits]; 
	float *tin = new float[nInternalUnits + nOutputs];
	int collectdata=0;

	for(int i=0;i<nDatapoints-1;i++){
		float *tmp=new float[nInternalUnits+nInputs];
		for(int j=0;j<nInternalUnits+nInputs;j++) tmp[j]=0;
		
		//for(int j=0;j<nInputs;j++) cout<<EMGsignal[i][j]<<" ";
		//cout<<"\n";

		for(int j=0;j<nInputs;j++){
			in[j]=inputScaling[j]*EMGsignal[i][j]+inputShift[j];
			//cout<<in[j]<<" ";
		}
		
		
		for(int j=nInternalUnits;j<nInternalUnits+nInputs;j++){
			totalstate[j]=in[j-nInternalUnits];
		}
		
		internalState=plain_esn(totalstate);
		
		
		for(int j=0;j<nInternalUnits+nInputs;j++){
			if(j<nInternalUnits) tin[j]=internalState[j];
			else tin[j]=in[j-nInternalUnits];
		}

		
		
		for(int j=0;j<nOutputs;j++){
			float tnumber=0;
			for(int k=0;k<nInternalUnits+nInputs;k++){
				tnumber=tnumber+outputWeights[j][k]*tin[k];
			}
			netOut[j]=tnumber;
		}
		
		for(int j=0;j<nInternalUnits;j++) totalstate[j]=internalState[j];
		
		for(int j=nInternalUnits+nInputs;j<nInternalUnits+nInputs+nOutputs;j++) totalstate[j]=netOut[j-(nInternalUnits+nInputs)];

		

		for(int j=0;j<nInternalUnits+nInputs;j++) tmp[j]=totalstate[j];
		if(i>=nforgetpoints-1){
			stateCollectMat[collectdata]=tmp;
			collectdata=collectdata+1;
		}
	}

	return stateCollectMat;
}

float* ESN::plain_esn(float *tState){
	float **tmp=new float*[nInternalUnits];
	float **diagfeedback=new float*[nOutputs];
	for(int i=0;i<nOutputs;i++){
		diagfeedback[i]=new float[nOutputs];
		for(int j=0;j<nOutputs;j++){
			diagfeedback[i][j]=0;
			if(j==i) diagfeedback[i][j]=feedbackScaling[i];
		}
	}
	
	float **feedS=new float*[nInternalUnits];
	for(int i=0;i<nInternalUnits;i++){
		feedS[i]=new float[nOutputs];
		for(int j=0;j<nOutputs;j++){
			float tmp2=0;
			for(int k=0;k<nOutputs;k++){
				tmp2=tmp2+feedbackWeights[i][k]*diagfeedback[k][j];
			}
			feedS[i][j]=tmp2;
		}
	}
	
	for(int i=0;i<nInternalUnits;i++){
		tmp[i]=new float[nInternalUnits+nInputs+nOutputs];
		for(int j=0;j<nInternalUnits+nInputs+nOutputs;j++){
			if(j<nInternalUnits) tmp[i][j]=internalWeights[i][j];
			if((j>=nInternalUnits)&&(j<nInternalUnits+nInputs)) tmp[i][j]=inputWeights[i][j-nInternalUnits];
			if(j>=nInternalUnits+nInputs) tmp[i][j]=feedS[i][j-(nInternalUnits+nInputs)];
		}
	}
	
	float *internalState=new float[nInternalUnits];
	for(int i=0;i<nInternalUnits;i++){
		float tmp2=0;
		for(int j=0;j<nInternalUnits+nInputs+nOutputs;j++){
			tmp2=tmp2+tmp[i][j]*tState[j];
		}
		internalState[i]=tanh(tmp2);
	}
	for(int i=0;i<nInternalUnits;i++){
		delete tmp[i];
		delete feedS[i];
	}
	delete tmp;
	delete feedS;
	for(int i=0;i<nOutputs;i++) delete diagfeedback[i];
	delete diagfeedback;
	return internalState;
}

int ESN::s_classify(float **outputSeq, int npoints){
	float *classes=new float[nOutputs];
	for(int i=0;i<nOutputs;i++){
		classes[i]=0;
	}
	
	for(int i=0;i<npoints;i++){
		for(int j=0;j<nOutputs;j++){
			classes[j]=classes[j]+outputSeq[i][j];
		}
	}
	float c_max=-100;
	int index=-100;
	for(int i=0;i<nOutputs;i++){
		
		if(classes[i]>c_max){
			c_max=classes[i];
			index=i;
		}
		
	}
	//for(int i=0;i<5;i++) cout<<classes[i]<<" ";
	//cout<<"\n";
	delete classes;
	return index;
}
